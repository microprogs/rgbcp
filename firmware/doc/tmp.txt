real ~ fact
799A:
7fe0:10570 (0x294A) ~ 10700 (0x29cc), Промах = 1300000Hz
8000:10620 (0x297C) ~ 10700 (0x29cc), Промах =  800000Hz
8020:10420 (0x28B4) ~ 10700 (0x29cc), Промах = 2800000Hz
8666:10090 (0x2A94) ~ 10700 (0x29cc), Промах = 6100000Hz


32470 = 7ED6



{{{
[87.50 - 107.90]
87.50
87.90 - City FM
88.30
88.70
89.50
89.90
90.30 - Auto Radio
90.80
92.00
92.40
92.80
93.20
93.60
94.00
94.80
95.60
96.00
96.80
97.60
98.00
98.80
99.60
100.50
101.20
102.50
103.00
103.70
104.20
107.00 - РСН
107.80
}}}


/* Si4705 Properties */
#define FM_PROP_DIGITAL_OUTPUT_FORMAT			0x0102	/* Def: 0x0000, Configures the digital output format. */
#define FM_PROP_DIGITAL_OUTPUT_SAMPLE_RATE		0x0104	/* Def: 0x0000, Configures the digital output sample rate in 100 Hz steps. 
                                                         * The digital output sample rate is disabled by default. */
#define FM_PROP_REFCLK_FREQ						0x0201	/* Def: 0x8000, Sets frequency of reference clock in Hz. 
                                                         * The range is 31130 to 34406 Hz, or 0 to disable the AFC. Default is 32768 Hz. */
#define FM_PROP_FM_DEEMPHASIS					0x1100 	/* Def: 0x0002, Sets deemphasis time constant. Default is 75 us. */
#define FM_PROP_FM_BLEND_STEREO_THRESHOLD		0x1105 	/* Def: 0x0031, Sets RSSI threshold for stereo blend (Full stereo above
                                                         * threshold, blend below threshold). To force stereo set this to 0.
                                                         * To force mono set this to 127. Default value is 49 dBuV. */
#define FM_PROP_FM_BLEND_MONO_THRESHOLD			0x1106 	/* Def: 0x001E, Sets RSSI threshold for mono blend (Full mono below
                                                         * threshold, blend above threshold). To force stereo set this to 0.
                                                         * To force mono set this to 127. Default value is 30 dBuV. */
#define FM_PROP_FM_MAX_TUNE_ERROR				0x1108	/* Def: 0x001E, Sets the maximum freq error allowed before setting 
                                                         * the AFC rail (AFCRL) indicator. Default value is 30 kHz. */


Si4705 pins:
++++++++++#1. SDA
++++++++++#2. SCL
++++++++++#3. FRST
++++++++++#4. RCLK
#5. DCLK
#6. DFS
#7. DOUT
#8. ROUT - 14


1/31130    = 32,123353678 us = 32123,353678 ns
1/32768 Hz = 30,517578125 us = 30517,578125 ns
1/34406    = 29,064698018 us = 29064,698018 ns

1/48 ~ 1 us
1/24 ~ 0.5 us
1/12 ~ 0.25 us



1/32768 ~ 30,5 us ~ 61 ticks

1 tick ~ 1/24 ~ 0.5 us


// Interrupt Request numbers
typedef enum _IRQ_NUM
{
	IRQ_I2C                      = 40,       // I2C Interrupt, SI (state change)
	IRQ_TIMER_16_0               = 41,       // 16-bit Timer0 Interrupt, Match 0-2, Capture 0
	IRQ_TIMER_16_1               = 42,       // 16-bit Timer1 Interrupt, Match 0-1, Capture 0
	IRQ_TIMER_32_0               = 43,       // 32-bit Timer0 Interrupt, Match 0-3, Capture 0
	IRQ_TIMER_32_1               = 44,       // 32-bit Timer1 Interrupt, Match 0-3, Capture 0

	IRQ_USB                      = 47,       // USB Regular Interrupt (low-priority interrupt)

	IRQ_PIO3                     = 53,       // External Interrupt 3, GPIO interrupt status of port 3
	IRQ_PIO2                     = 54,       // External Interrupt 2, GPIO interrupt status of port 2
	IRQ_PIO1                     = 55,       // External Interrupt 1, GPIO interrupt status of port 1
	IRQ_PIO0                     = 56,       // External Interrupt 0, GPIO interrupt status of port 0
} IRQ_NUM;


extern void i2c_irq_handler(void);
extern void timer16_0_irq_handler(void);
extern void timer16_1_irq_handler(void);
extern void timer32_0_irq_handler(void);
extern void timer32_1_irq_handler(void);

extern void usb_irq_handler(void);

extern void pio_int3_irq_handler(void);
extern void pio_int2_irq_handler(void);
extern void pio_int1_irq_handler(void);
extern void pio_int0_irq_handler(void);


__attribute__ ((section(".vector_table")))
const isr_handler vectors[256]=
{
	(isr_handler)(i2c_irq_handler),           // #56  (0x0E0) I2C handler
	(isr_handler)(timer16_0_irq_handler),     // #57  (0x0E4) CT16B0 (16-bit Timer 0) handler
	(isr_handler)(timer16_1_irq_handler),     // #58  (0x0E8) CT16B1 (16-bit Timer 1) handler
	(isr_handler)(timer32_0_irq_handler),     // #59  (0x0EC) CT32B0 (32-bit Timer 0) handler
	(isr_handler)(timer32_1_irq_handler),     // #60  (0x0F0) CT32B1 (32-bit Timer 1) handler

	(isr_handler)(usb_irq_handler),           // #63  (0x0FC) USB IRQ handler

	(isr_handler)(pio_int3_irq_handler),      // #69  (0x114) PIO INT3 handler
	(isr_handler)(pio_int2_irq_handler),      // #70  (0x118) PIO INT2 handler
	(isr_handler)(pio_int1_irq_handler),      // #71  (0x11C) PIO INT1 handler
	(isr_handler)(pio_int0_irq_handler),      // #72  (0x120) PIO INT0 handler
};






12MHz -> 0.19 KHz
24MHz -> 0.37 KHz
36MHz -> 0.55 KHz
48MHz -> 0.74 KHz
72MHz -> 1.10 KHz


main()
{
		PDRUNCFG &= ~(0b10100000);
		SYSPLLCLKSEL = 0x00000001;
		SYSPLLUEN = 0x00000000;
		SYSPLLUEN = 0x00000001;

		SYSPLLCTRL = 0x00000005;
		while (SYSPLLSTAT & 1);

		MAINCLKSEL = 0x00000003;
		MAINCLKUEN = 0x00000000;
		MAINCLKUEN = 0x00000001;

		SYSAHBCLKCTRL |= 0x00001000;
}



{
.equ STACK_TOP, 0x10002000

.text
.global _start
.thumb
.syntax unified
_start:
.word STACK_TOP,start
.type start,function

.org 0x124
start:
bl SYS_TACT_INIT

ldr.w r0,=0x50008000 @ адресс GPIO0DIR
ldr.w r1,=0x00000000
ldr.w r2,=0xFFFFFFFFF
str.w r2,[r0] @ порт 0 все порты на выход
ldr.w r0,=0x50003FFC @ адресс GPIO0DATA
aaaa: 
str.w r1,[r0] @ порт в 0
dsb.w @ синхронизация
str.w r2,[r0] @ порт в 1
dsb.w
b.w aaaa
SYS_TACT_INIT:
push {lr}
ldr.w r1,=0x00000001
ldr.w r2,=0x00000000

ldr.w r0,=PDRUNCFG
str.w r3,[r0]
bic.w r3,#0xA0
ldr.w r3,[r0]

ldr.w r0,=SYSPLLCLKSEL
str.w r1,[r0]
dsb
ldr.w r0,=SYSPLLUEN
str.w r2,[r0]
dsb
str.w r1,[r0]

bl SYS_PLL_72MHZ

ldr.w r0,=MAINCLKSEL
ldr.w r3,=0x00000003
str.w r3,[r0]
dsb
ldr.w r0,=MAINCLKUEN
str.w r2,[r0]
dsb
str.w r1,[r0]

ldr.w r0,=SYSAHBCLKCTRL
ldr.w r1,[r0]
ldr.w r2,=0x00001000
orr.w r1,r2
str.w r1,[r0]
dsb
pop {pc}

SYS_PLL_72MHZ:
push {r0-r2}
ldr.w r0,=SYSPLLCTRL
ldr.w r1,=0x00000005
str.w r1,[r0]
dsb
ldr.w r0,=SYSPLLSTAT
SYS_2:
ldr.w r1,[r0]
ldr.w r2,=0x00000001
ands.w r2,r1
bne.w SYS_2 
pop {r0-r2}
bx lr
}




+++ 0x00000000 - 0x000003FF: FLASH: Interrupt Table (size 0x00000400)
+++ 0x00000400 - 0x00007FFF: FLASH: Code (size 0x00007C00)

+++ 0x10000000 - 0x1000017F: SRAM: USB Driver Buffers (size 0x00000180)
+++ 0x10000180 - 0x10001FFF: SRAM: Available RAM (size 0x00001E80)

--- 0x1FFF0000 - 0x1FFF3FFF: BOOT ROM (size 0x00004000)

--- 0x22000000 - 0x23FFFFFF: AHB SRAM bit-band alias addressing (size 0x02000000)

--- 0x40000000 - 0x40003FFF: APB: I2C (size 0x00004000)
--- 0x4000C000 - 0x4000FFFF: APB: CT16B0 (size 0x00004000)
--- 0x40010000 - 0x40013FFF: APB: CT16B1 (size 0x00004000)
--- 0x40014000 - 0x40017FFF: APB: CT32B0 (size 0x00004000)
--- 0x40018000 - 0x4001BFFF: APB: CT32B1 (size 0x00004000)
--- 0x40020000 - 0x40023FFF: APB: USB (size 0x00004000)
+++ 0x40044000 - 0x40047FFF: APB: IOCONFIG (size 0x00004000)
+/- 0x40048000 - 0x4004BFFF: APB: System Control (size 0x00004000)

+/- 0x50000000 - 0x5000FFFF: AHB: GPIO PORT 0 (size 0x00010000)
+/- 0x50010000 - 0x5001FFFF: AHB: GPIO PORT 1 (size 0x00010000)
+/- 0x50020000 - 0x5002FFFF: AHB: GPIO PORT 2 (size 0x00010000)
+/- 0x50030000 - 0x5003FFFF: AHB: GPIO PORT 3 (size 0x00010000)










PIO0_3 - USB_VBUS
PIO3_0 - RED LED
PIO3_1 - GREEN LED
PIO3_2 - DBG FLAG
PIO0_4 - SCL
PIO0_5 - SDA
PIO1_5 - DOUT
PIO2_1 - FRST
PIO2_0 - DFS
PIO1_7 - DCLK
PIO1_6 - RCLK



Remark: The USB PLL must be connected to the system oscillator for correct USB
operation 

This register updates the clock source of the system PLL with the new input clock after the
SYSPLLCLKSEL register has been written to. In order for the update to take effect, first
write a zero to the SYSPLLUEN register and then write a one to SYSPLLUEN.
Remark: When switching clock sources, both clocks must be running before the clock
source is updated.

USB PLL clock source select register
This register selects the clock source for the dedicated USB PLL. The USBPLLCLKUEN
register (see Section 3.5.14) must be toggled from LOW to HIGH for the update to take
effect.
Remark: When switching clock sources, both clocks must be running before the clock
source is updated in the USBPLLCLKUEN register. For USB operation, the clock source
must be switched from IRC to system oscillator with both the IRC and the system
oscillator running. After the switch, the IRC can be turned off.

Main clock source select register
This register selects the main system clock which can be either any input to the system
PLL, the output from the system PLL (sys_pllclkout), or the watchdog or IRC oscillators
directly. The main system clock clocks the core, the peripherals and memories, and
optionally the USB block.
The MAINCLKUEN register (see Section 3.5.16) must be toggled from LOW to HIGH for
the update to take effect.
Remark: When switching clock sources, both clocks must be running before the clock
source is updated.


Rest:
[[[
0x1FFF0000 - 0x1FFF3FFF: BOOT ROM (size 0x00004000)

0x22000000 - 0x23FFFFFF: AHB SRAM bit-band alias addressing (size 0x02000000)

0x40000000 - 0x40003FFF: APB: I2C (size 0x00004000)

0x4000C000 - 0x4000FFFF: APB: CT16B0 (size 0x00004000)
0x40010000 - 0x40013FFF: APB: CT16B1 (size 0x00004000)
0x40014000 - 0x40017FFF: APB: CT32B0 (size 0x00004000)
0x40018000 - 0x4001BFFF: APB: CT32B1 (size 0x00004000)

0x40020000 - 0x40023FFF: APB: USB (size 0x00004000)

0x40048000 - 0x4004BFFF: APB: System Control (size 0x00004000)
]]]



Все адреса периферийных регистров выровнены по 32м битам.

2 MB - AHB-Lite (Advanced High-speed Bus Lite) - только GPIO, а можно до 128 устройств
512 KB - APB (Advacned Peripheral Bus) - до 32 устройств, 16 KB на девайс, USB здесь!!!

Регистры можно читать/писать словами по 32 бита, или полу-словами по 16 бит.


#define PACKED_PRE /**/
#define PACKED_POST __attribute__((packed))



+++1. Добить Int Table
+++2. Добить linker.ld (подумать про .bss и .data), прочитать GNU LD script manual
+++3. Сделать маленький stdlib - для начала string.h (memcpy, memset)
+++4. Сделать обнуление .bss в reset_handler
+++5. Сделать копирование .data из flash (физические адреса) в ram (виртуальные адреса) в reset_handler
++++6. Сделать передачу управления на void main(void) в reset_handler, а затем грохнуться в while (1);, если main вернул управление...
+++7. Сказать линкеру, что первые 0x180 байт ram принадлежат драйверу USB HID ROM DRV
+++сделать макросы для работы с битами
8. Настроить клокирование и мемори-мапинг
++++9. сделать асмомвые интрисики из CMSIS
++++сделалать систайпы
10. сделать структуры и мемори мапинг из CMSIS
+++11. стащить из JOS линк скрипты
+++12. стащить из JOS стдлиб


	int a1 = sizeof(char);//1
	int a2 = sizeof(short);//2
	int a3 = sizeof(int);//4
	int a4 = sizeof(long);//4
	int a5 = sizeof(long long);//8
	int a6 = sizeof(float);//4
	int a7 = sizeof(double);//8
	int a8 = sizeof(long double);//8


void isr_reset(void)
{
	/* copy the .data section from flash to RAM */

	/* zero the .bss section */

	main();

	while(1) ;
}



/*
Note that there are 128 entries (4 bytes each) in the vector table above. We only set the first two and the rest are filled with zeros. Ideally, the 'reset' handler should copy the .data segment into RAM. However, this segment is empty in our program (i.e., there are no global initialised variables) and we can just skip this step. To simplify thing further, we can also live without zeroing the .bss segment. Finally, the interrupt handler calls the main function of our program.
*/

/*
> arm-elf-gcc -nostdlib -Xlinker --gc-sections -mcpu=cortex-m3 -mthumb -T link.ld startup.c test.c -o test
*/

void isr_reset(void);
extern void main(void);


/*
This linker script specifies sections that will go into the output executable file. For example, the .text section will be first starting at address 0x0 in flash. It will include the vector_table section, followed by any .text or .rodata sections exported by passed relocatable files. The simplified description of an output section looks like this:

section [address]:
{
output-section-command
output-section-command
...
} [>region] [AT>lma region]
*/


/*
When a start memory address is omitted or the dot "." is used, it is substituted with the current address. For example, .text will start at 0x0 by default and _etext will point to 0x0+sizeof(.text). Furthermore, 'region' specifies the virtual memory region, i.e., the region the section will be in when the output file is run. The 'lma region' is the load memory region (the region at which the section will be loaded). Usually these two addresses are the same. In case of the .data section (contains global initialised variables) above, they are different because the .data section located in flash must be copied into RAM before the program starts executing. 

Finally, we set the start address of the stack (_stack_top) which points to the RAM end address (note that the stack grows downwards, i.e., towards lower memory addresses). One might be curios about the vector_table section that comes before any actual code. The LPC1343 microprocessor exports its interrupt vector table as the first 512 bytes starting at address 0x0. Hence, we cannot place our code at this address. Furthermore, the first interrupt issued by the microcontroller is the 'reset' interrupt which kick-starts the program execution. It is the second entry in the interrupt table. The first entry is the stack pointer. We don't need to worry about other interrupts, since we are not using them in our program. However, you might want to consider implementing interrupt handlers for every available interrupt later on.
*/


/*
This is quite intuitive and I believe requires no explanation. The only thing I'd like to mention here is that, the flash memory region is rx (read-execute) and ram is rwx (read-write-execute).
Next, we need to specify the main entry point in our program (i.e., instead of the default _start entry). Let's call it 'reset' and I'll explain why a bit later.
*/


/*
NO HEAP!!!

flash: .interrupts, .checksum, .crp, .text, .rodata
sram: .drvdata (must be zeroed by start code), .data (must be zeroed by start code and copyed from .rodata), .bss (must be zeroed by start code), .stack (must be zeroed by start code)
*/


/*
According to the LPC1343 user manual, the flash memory region starts at 0x0 and finishes at 0x8000 (32Kb). Similarly, RAM starts at 0x10000000 and finishes at 0x10002000 (8Kb). So, let's define our memory regions:
*/

/* link.ld - GNU ld script */


Режим «Thread» является типичным режимом работы, в котором код программы может быть как привилегированным, так и непривилегированным. Переход в режим «Handler» происходит при возникновении исключительной ситуации (exception); в данном режиме весь код программы выполняется как привилегированный. Также предусматривается такое понятие, как рабочее состояние ядра. Их два: Thumb, в котором выполнение инструкций идет обычным путем, и Debug, в котором активизируются встроенные отладочные возможности ядра.


